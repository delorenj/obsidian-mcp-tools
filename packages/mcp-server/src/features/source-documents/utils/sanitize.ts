import { type } from "arktype";

/**
 * Sanitizes a title for use as a document ID/filename.
 *
 * @param title - The title to sanitize
 * @returns A sanitized version of the title safe for use as a filename
 *
 * @example
 * sanitizeTitle("How to Build a CLI - John Doe | Example.com")
 * // Returns: "How to Build a CLI"
 *
 * sanitizeTitle("深入理解 JavaScript - 编程指南")
 * // Returns: "深入理解 JavaScript"
 *
 * sanitizeTitle("La programación es divertida!")
 * // Returns: "La programación es divertida"
 */
export function sanitizeTitle(title: string): string {
  return (
    title
      // Remove author and website info (typically after " - " or " | ")
      .split(/\s[|-]\s/)[0]
      // Replace invalid filename characters
      .replace(/[<>:"/\\|?*\x00-\x1F]/g, "-")
      // Convert multiple dashes to single
      .replace(/-+/g, "-")
      // Remove leading/trailing dash and whitespace
      .trim()
      .replace(/^-|-$/g, "")
      // Ensure reasonable length
      .slice(0, 100)
  );
}

/**
 * Tests if a string is a valid document ID.
 * - Must be between 1 and 100 characters
 * - Cannot contain invalid filename characters
 *
 * @example
 * documentIdSchema.allows("valid-document-id") // boolean
 */
export const documentIdSchema = type("0<string<=200")
  .and(/^[^<>:"\\|?*\x00-\x1F]+$/)
  .pipe((value) =>
    value
      .split("/")
      .map((x) => x.replace(/\s/g, "-").replace(/-+/g, "-"))
      .map(encodeURIComponent)
      .join("/"),
  );

/**
 * Creates a document ID from a URL and title.
 *
 * The document ID is generated by:
 * 1. Sanitizing the title using `sanitizeTitle`.
 * 2. Combining the host from the URL and the sanitized title.
 * 3. Validating the resulting document ID using `documentIdSchema`.
 * 4. If the document ID is invalid, throwing an error with the validation error.
 *
 * @param url - The URL of the document.
 * @param title - The title of the document.
 * @returns The generated document ID.
 * @throws {Error} If the generated document ID is invalid.
 */
export const createDocumentId = (url: string, title: string) => {
  const sanitizedDocumentTitle = sanitizeTitle(title);
  const documentId = documentIdSchema(
    `${new URL(url).host}/${sanitizedDocumentTitle}`,
  );
  if (documentId instanceof type.errors) {
    throw new Error(`Invalid document ID: ${documentId.summary}`);
  }
  return documentId;
};
